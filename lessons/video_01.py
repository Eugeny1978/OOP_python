# Определяем Класс (Шаблон)
class Point:
    # Переменные внутри Класса называют Атрибутами или Свойствами
    color = 'red'
    circle = 2

# Обратиться к Свойствам
a = Point.color
# Переопределить значение Свойства
Point.color = 'green'

#Доступ к Коллекции Свойств
features = Point.__dict__
print(features)

#Создание Объектов (Экземляров) Класса
object_a = Point()
object_b = Point()

# Посмотреть к какому типу объектов относится переменная
print(type(object_a))

# Определение Свойства для Экземляра Объекта
object_a.color = 'blue'

# Определение Свойства или Переопределение для всех объектов Класса
# Свойство type_pt
Point.type_pt = 'disc'
# Свойство prop
setattr(Point, 'prop', 25)

# Обратиться к Свойству чтобы не вызвать Ошибку в случае отсутствия такого Атрибута
yyy = getattr(Point, 'xxx', False)
print(yyy)

# Такая запись без ошибки вернет значение только если Атрибут существует
print(getattr(Point, 'color'))

# Удаление Атрибута из Класса
# Удалять можно ТОЛЬКо существующие Атрибуты (поэтому перед этим имеет смысл проверить их наличие
print(Point.__dict__) # список Атрибутов ДО удаления
del Point.prop # 1й Способ непосредственно в том что прописываем в данн случае в Классе
del object_a.color # в данном случае в Экземляре и фактически в данн случае значение color меняется на значение кот. в Классе
delattr(Point, 'type_pt') # 2й Способ
print(Point.__dict__) # список Атрибутов ПОСЛЕ удаления

# Проверить ЕСТЬ ли такой ДОСТУП к такому Атрибуту
x = hasattr(Point, 'circle')
print(x)

class Points:
    'Класс для представления координат точек на плоскости'
    # Глобальные Атрибуты
    color = 'gray'
    circle = 3

ob_a = Points()
ob_b = Points()
# ЛОкальные Атрибуты (Свойства) (независимые)
ob_a.x = 10
ob_a.y = 35
ob_b.x = 4
ob_b.y = 17

print(Points.__doc__)