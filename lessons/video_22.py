#22. Наследование. Функция super() и делегирование
# Extended Раширение (добавление Свойств, Методов)
# Overriding Переопределение (Изменение Св-в, Методов)

# При создании Экземпляра Клапсса ххх = ХХХ(). Происходит вызов магич. функций:
# __call__(self, *args, *kwargs): # Берется Из МЕТАКЛАССА
#   obj = self.__new__(self, *args, *kwargs)
#   self.__init__(obj, *args, *kwargs)
#   return obj

# super() Возвращает Объек-Посредник, поэтому self в Параметрах указывать не надо (см код ниже)
# Вызов методов через super() - Делегирование

class Geom:
    name = 'Geom'

    def __init__(self, x1, y1, x2, y2):
        print(f'Инициализатор Класса "Geom" для: {self.__class__}')
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2
    def draw(self):
        print('Рисование Примитива')

class Line(Geom):

    def draw(self): # Переопределение
        print('Рисование Линии')

class Rect(Geom):
    def __init__(self, x1, y1, x2, y2, fill=None):
        print('Инициализатор Класса "Rect"')
        super().__init__(x1, y1, x2, y2) # Geom.__init__(self, x1, y1, x2, y2)
        # Инициализатор Базового Класса необходимо Вызывать в Первую Очередь!
        # ДО ТОГО как мы в явном или неявном виде будем менять Данные
        # в данн случае это имеет смысл, например, если бы мы Меняли Св-во fill в инициализаторе Базового Класса
        self.fill = fill

    def draw(self): # Переопределение
        print('Рисование Прямоугольника')




# ---- RUN --------------------------------------

l1 = Line(0, 0, 10, 20)
print(l1.__dict__)
r1 = Rect(21, 31, 45, 55, 'Red')
print(r1.__dict__)