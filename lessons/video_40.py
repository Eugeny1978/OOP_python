# Пять принципов SOLID

# S - Single Responsibility Principle (Принцип Единственной Ответственности)
# O - Open-Close Principle (Принцип Открытости-Закрытости)
# L - Liskov Substitution Principle (Принцип Подстановки Барбары Лисков)
# I - Interface Segregation Principle (Принцип Разделения Интерфейса)
# D - Dependence Inversion Principle (Принцип Инверсии Зависимостей)

# S
# Добавляю Независимые Классы. Разграничиваю Ответственность (см. video_40_1)

# O
# Расширяю функционал программы не переписываю существующие классы,
# а зоздавая Дочерние классы в которых переопределяю существующие методы
# т.е. используем Полиморфизм Классов

# L
# Подклассы должны заменять свои Базовые Классы
# Чтобы в дочерних Классах методы что и в Базовом осуществляли теже действия
# существенно их не меняя
#
# I
# Нужно создавать УзкоСпециализированные Интерфейсы (Абстрактные Классы), преднозначенные для конкретного клиента
#
#
# D
# Классы должны зависить от Абстрактных Классов а не от конкретных классов и функций/